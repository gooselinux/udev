--- udev_pre/Makefile.am	2009-11-10 09:09:27.000000000 -0500
+++ udev_pre/Makefile.am	2010-06-08 21:18:12.038000784 -0400
@@ -124,7 +124,8 @@ udev_common_sources =\
 	udev/udev-event.c \
 	udev/udev-watch.c \
 	udev/udev-node.c \
-	udev/udev-rules.c
+	udev/udev-rules.c \
+	udev/udev-lock.c
 
 udev_udevd_SOURCES = \
 	$(udev_common_sources) \
--- udev_pre/udev/udevd.c	2009-11-04 11:04:40.000000000 -0500
+++ udev_pre/udev/udevd.c	2010-06-08 21:22:28.970999623 -0400
@@ -818,6 +818,7 @@ int main(int argc, char *argv[])
 	udev_set_log_fn(udev, log_fn);
 	info(udev, "version %s\n", VERSION);
 	udev_selinux_init(udev);
+	udev_lock_init();
 
 	while (1) {
 		int option;
--- udev_pre/udev/udev-event.c	2009-09-18 07:14:07.000000000 -0400
+++ udev_pre/udev/udev-event.c	2010-06-08 22:25:00.061748460 -0400
@@ -741,13 +741,25 @@ int udev_event_execute_run(struct udev_e
 		} else {
 			char program[UTIL_PATH_SIZE];
 			char **envp;
+			int locked = 0;
 
 			udev_event_apply_format(event, cmd, program, sizeof(program));
+
+			if (strncmp(basename(cmd), "modprobe", strlen("modprobe")) == 0) {
+				udev_lock_down();
+				locked = 1;
+			}
+
 			envp = udev_device_get_properties_envp(event->dev);
+
 			if (util_run_program(event->udev, program, envp, NULL, 0, NULL, sigmask) != 0) {
 				if (udev_list_entry_get_flag(list_entry))
 					err = -1;
 			}
+
+			if (locked) {
+				udev_lock_up();
+			}
 		}
 	}
 	return err;
--- udev_pre/udev/udev.h	2009-09-07 06:13:50.000000000 -0400
+++ udev_pre/udev/udev.h	2010-06-08 21:29:38.492035597 -0400
@@ -73,6 +73,12 @@ size_t udev_event_apply_format(struct ud
 int udev_event_apply_subsys_kernel(struct udev_event *event, const char *string,
 				   char *result, size_t maxsize, int read_value);
 
+/* udev-lock.c */
+int udev_lock_init(void);
+int udev_lock_teardown(void);
+int udev_lock_down(void);
+int udev_lock_up(void);
+
 /* udev-watch.c */
 int udev_watch_init(struct udev *udev);
 void udev_watch_restore(struct udev *udev);
--- udev_pre/udev/udev-lock.c	1969-12-31 19:00:00.000000000 -0500
+++ udev_pre/udev/udev-lock.c	2010-06-08 21:22:14.792011866 -0400
@@ -0,0 +1,136 @@ 
+/* udev-lock.c: force linear serialization of module loading for RHEL.
+ *
+ *  Copyright (C) 2010 Jon Masters <jcm@jonmasters.org>.
+ *
+ *  This program is free software; you can redistribute it and/or modify
+ *  it under the terms of the GNU General Public License as published by
+ *  the Free Software Foundation; either version 2 of the License, or
+ *  (at your option) any later version.
+ *
+ *  This program is distributed in the hope that it will be useful,
+ *  but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ *  GNU General Public License for more details.
+ *
+ *  You should have received a copy of the GNU General Public License
+ *  along with this program; if not, write to the Free Software
+ *  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+ *  02110-1301, USA.
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <unistd.h>
+#include <errno.h>
+#include <sys/types.h>
+#include <signal.h>
+#include <sys/ipc.h>
+#include <sys/shm.h>
+#include <sys/sem.h>
+
+static int udev_lock_semid = -1;
+
+/*
+ * RHEL-specific. For various reasons, we desire to have calls to modprobe be
+ * serialized in certain circumstances (specifically, as a means to avoid the
+ * problems associated with network devices being enumerated out-of-order when
+ * using parallel module loading techniques). There are longer term upstream
+ * solutions, this particular file provides a temporary modprobe workaround.
+ * It is enabled by default so as to give some users behavior they have come
+ * to expect on RHEL systems, while hopefully not affecting others too much.
+ *
+ * The design uses a global signalling semaphore (mutex) to allow one single
+ * instance of modprobe to execute in response to a RUN= rule event entry.
+ *
+ * NOTE: we need this weird IPC since file locks are unavailable if
+ * the filesystem upon which we wish to store them is read-only.
+ */
+
+/* required to be defined for semctl */
+union semun {
+	int val; /* Value for SETVAL */
+	struct semid_ds *buf; /* Buffer for IPC_STAT, IPC_SET */
+	unsigned short *array; /* Array for GETALL, SETALL */
+	struct seminfo *__buf; /* Buffer for IPC_INFO (Linux-specific) */
+};
+
+/*
+ * udev_lock_init - initialize the global semaphore.
+ */
+int udev_lock_init(void)
+{
+	union semun arg; /* required for semctl */
+
+	udev_lock_semid = semget(IPC_PRIVATE, 1, 0600);
+
+	/* newly created */
+	if (udev_lock_semid >= 0) {
+		arg.val = 1; /* initial value - unlocked */
+
+		/* V() */
+		if (semctl(udev_lock_semid, 0, SETVAL, arg) == -1) {
+			semctl(udev_lock_semid, 0, IPC_RMID);
+			return -1;
+		}
+
+	/* already exists */
+	} else {
+		/*
+		 * no need to have special case waiting logic since
+		 * only one udevd instance will create one at a time
+		 */
+		return -1;
+	}
+
+	return 0;
+}
+
+/*
+ * udev_lock_teardown - tear down the global semaphore.
+ * NOTE: This function is unused and implemented for completeness.
+ */
+int udev_lock_teardown(void)
+{
+	union semun arg;
+
+	if (semctl(udev_lock_semid, 0, IPC_RMID, arg) == -1)
+		return -1;
+
+	return 0;
+}
+
+/*
+ * udev_lock_down - grab the global semaphore
+ */
+int udev_lock_down(void) /* P() */
+{
+	struct sembuf sb;
+
+	sb.sem_num = 0;
+	sb.sem_op = -1; /* absolute, must be at least 1 - P() */
+	sb.sem_flg = SEM_UNDO;
+
+	if (semop(udev_lock_semid, &sb, 1) == -1)
+		return -1;
+
+	return 0;
+}
+
+/*
+ * udev_lock_up - release the global semaphore
+ */
+int udev_lock_up(void) /* V() */
+{
+	struct sembuf sb;
+
+	sb.sem_num = 0;
+	sb.sem_op = 1; /* absolute, adds 1 - V() */
+	sb.sem_flg = SEM_UNDO;
+
+	if (semop(udev_lock_semid, &sb, 1) == -1)
+		return -1;
+
+	return 0;
+
+}
